// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vbua/flightpath/internal/models"
)

// MockFlightService is a mock of FlightService interface.
type MockFlightService struct {
	ctrl     *gomock.Controller
	recorder *MockFlightServiceMockRecorder
}

// MockFlightServiceMockRecorder is the mock recorder for MockFlightService.
type MockFlightServiceMockRecorder struct {
	mock *MockFlightService
}

// NewMockFlightService creates a new mock instance.
func NewMockFlightService(ctrl *gomock.Controller) *MockFlightService {
	mock := &MockFlightService{ctrl: ctrl}
	mock.recorder = &MockFlightServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightService) EXPECT() *MockFlightServiceMockRecorder {
	return m.recorder
}

// FindStartAndEndOfPath mocks base method.
func (m *MockFlightService) FindStartAndEndOfPath(flights [][]string) models.Flight {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStartAndEndOfPath", flights)
	ret0, _ := ret[0].(models.Flight)
	return ret0
}

// FindStartAndEndOfPath indicates an expected call of FindStartAndEndOfPath.
func (mr *MockFlightServiceMockRecorder) FindStartAndEndOfPath(flights interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStartAndEndOfPath", reflect.TypeOf((*MockFlightService)(nil).FindStartAndEndOfPath), flights)
}
